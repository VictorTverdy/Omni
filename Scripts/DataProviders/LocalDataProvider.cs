//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

using UnityEngine;

using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;
using System.Xml;
using System.Text;
using Newtonsoft.Json;


namespace Omni.DataProviders
{
	public class LocalDataProvider : DataProvider, IDataProvider
	{
		string _data;
		UnityEngine.Object responseData;

		public override void SendRequest(string url, Dictionary<string, string> parameters, Dictionary<string, byte[]> binaryParameters = null)
		{
			m_url = url;
			LoadXML();
		}

		public override ProviderStatus GetReady()
		{
			if(!String.IsNullOrEmpty(_data))
			{
				return ProviderStatus.COMPLETED;			
			}
			else
			{
				return ProviderStatus.UNDEFINED; 
			}
		}

		protected override void ConfigureProvider(Dictionary<string, string> parameters, Dictionary<string, byte[]> binaryParameters = null)
		{

		}
	
		public override T GetData<T>(ResponseType responseType = ResponseType.None) 
		{
			try
			{
				T responseData = default(T);

				switch (responseType) {
					case ResponseType.Json:
						responseData = (T)DeserializeJsonObject<T>(_data);
						break;
					case ResponseType.Xml:
						responseData = (T)DeserializeXmlObject<T>(_data);	
						break;
				}
				return responseData;
			}
			catch(Exception e)
			{			
				Debug.LogError("Error Deserializing Call Url: " + m_url + " " + e);
				return null;
			}
		}
		
		private void LoadXML() 
		{			
			TextAsset text = (TextAsset)Resources.Load(m_url);
			_data = text.text;
		}
		
		// Here we deserialize it back into its original form 
		private T DeserializeJsonObject<T>(string pXmlizedString)
		{
			try
			{
				T responseData = default(T);

				responseData = JsonConvert.DeserializeObject<T>(pXmlizedString);
				
				return responseData;
			}
			catch(Exception e)
			{			
				Debug.LogError("Error Deserializing Call Url: " + m_url + " " + e);
				Debug.LogError("CallResponse: " + pXmlizedString);
				return default(T);
			}
		}

		private T DeserializeXmlObject<T>(string pXmlizedString)
		{
			try
			{
				T responseData = default(T);

				var serializer = new XmlSerializer(typeof(T));

				responseData = (T)serializer.Deserialize(new MemoryStream(StringToUTF8ByteArray(pXmlizedString)));

				return responseData;
			}
			catch(Exception e)
			{			
				Debug.LogError("Error Deserializing Call Url: " + m_url + " " + e);
				Debug.LogError("CallResponse: " + pXmlizedString);
				return default(T);
			}
		}
		
		private byte[] StringToUTF8ByteArray(string pXmlString) 
		{ 
			UTF8Encoding encoding = new UTF8Encoding(); 
			byte[] byteArray = encoding.GetBytes(pXmlString); 
			return byteArray; 
		}
	}
}