//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;

using UnityEngine;

using Omni.Entities;
using Omni.Utilities;

using Newtonsoft.Json;

namespace Omni.DataProviders
{
	public class LocalHttpDataProvider : DataProvider, IDataProvider
	{
		private byte[] pData;
		private WWWForm m_wwwRequestParameters;
		private static Dictionary<string, string> CommonHeadersPost = new Dictionary<string, string>();

		public LocalHttpDataProvider(): base()
		{
			
		}
		
		protected override void ConfigureProvider(Dictionary<string, string> parameters, Dictionary<string, byte[]> binaryParameters = null)
		{
			m_wwwRequestParameters = new WWWForm();
			
			foreach(KeyValuePair<string, string> element in CommonHeadersPost) 
			{
				m_wwwRequestParameters.headers.Add(element.Key, element.Value);
			}
			if(parameters != null)
			{
				foreach(KeyValuePair<string, string> element in parameters)
				{
					m_wwwRequestParameters.AddField(element.Key, element.Value);
				}
			}

			if(binaryParameters != null)
			{
				foreach(KeyValuePair<string, byte[]> element in binaryParameters)
				{
					m_wwwRequestParameters.AddBinaryData(element.Key, element.Value);
					pData = element.Value;
				}
			}
			
			m_wwwRequestParameters.AddField("content-type", "application/json");
		}

		public override void SendRequest(string url, Dictionary<string, string> parameters, Dictionary<string, byte[]> binaryParameters = null)
		{
			m_url = url;
			ConfigureProvider(parameters, binaryParameters);

			if( parameters != null)
			{
				m_wwwRequest = new WWW(m_url, m_wwwRequestParameters);
			}
			else
			{
				CommonHeadersPost = new Dictionary<string, string>();
				CommonHeadersPost["Content-type"] = "application/json";
				CommonHeadersPost["Accept"] = "application/json";

				m_wwwRequest = new WWW(m_url, pData, CommonHeadersPost);
			}
		}

		public override T GetData<T>(ResponseType responseType)
		{
			try
			{
				T responseData = default(T);
				if(ResponseType.Json == responseType || ResponseType.Xml == responseType){					

					GenericObjectUser genericObj = JsonConvert.DeserializeObject<GenericObjectUser>(m_wwwRequest.text);

					if(genericObj != null)
					{
						if(genericObj.result != null)
						{						
							string stringGenericObj = JsonConvert.SerializeObject(genericObj.result);

							responseData = JsonConvert.DeserializeObject<T>(stringGenericObj);
						}
					}
					else
					{
						responseData = JsonConvert.DeserializeObject<T>(m_wwwRequest.text);
					}
				}else if(ResponseType.Jpg == responseType)
				{
					Texture2D texture = m_wwwRequest.texture;
					Sprite sprite = Sprite.Create(texture, new Rect(0, 0, texture.width, texture.height), new Vector2(0.5f, 0.5f));
					responseData = sprite as T;
				}
				
				return responseData;
			}
			catch(Exception e)
			{			
				Debug.LogError("Error Deserializing Call Url: " + m_url + " " + e);
				Debug.LogError("CallResponse: " + m_wwwRequest.text);
				return default(T);
			}
		}

	}
}